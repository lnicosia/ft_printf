	if (data->i + size >= BUFF_SIZE)
		write(1, data->buffer, data->i);
		data->i = 0;
			data->buffer[data->i] = s[i];
			data->i++;
	data->left = 0;
	data->plus = 0;
	data->zero = 0;
	data->space = 0;
	data->sharp = 0;
	data->l_min = 1;
	data->prec = -1;
	data->size = 4;
		data->buffer[i] = '\0';
			data->left = 1;
			data->plus = 1;
			data->space = 1;
			data->sharp = 1;
			data->zero = 1;
	data->options = s;
		data->l_min = nb;
		data->prec = nb;
		data->size = 8;
		data->size = 2;
			data->size = 1;
		data->size = 4;
	a = (long)va_arg(data->ap, void *);
	data->padding.size = 1;
	if (!data->left && data->zero)
		data->padding.zeros = data->l_min - data->padding.size;
	data->padding.right_spaces = 0;
	data->padding.left_spaces = 0;
	if (data->left)
		data->padding.right_spaces = data->l_min - data->padding.zeros
			- data->padding.size;
		data->padding.left_spaces = data->l_min - data->padding.zeros
			- data->padding.size;
	c = va_arg(data->ap, int);
	while (data->padding.left_spaces > 0)
		data->padding.left_spaces--;
	while (data->padding.zeros > 0)
		data->padding.zeros--;
	while (data->padding.right_spaces > 0)
		data->padding.right_spaces--;
	else if (data->plus)
	else if (data->space)
	data->padding.size = 0;
	data->padding.sign = (nb < 0 || data->plus || data->space) ? 1 : 0;
		data->padding.size++;
	if (data->prec == 0)
		data->padding.zeros = 0;
	else if (data->prec > 0)
		data->padding.zeros = data->prec - data->padding.size;
	else if (!data->left && data->zero)
		data->padding.zeros = data->l_min - data->padding.size
			- data->padding.sign;
	data->padding.right_spaces = 0;
	data->padding.left_spaces = 0;
	if (data->left)
		data->padding.right_spaces = data->l_min - data->padding.sign
			- data->padding.zeros - data->padding.size;
		data->padding.left_spaces = data->l_min - data->padding.sign
			- data->padding.zeros - data->padding.size;
	nb = va_arg(data->ap, long);
	if (data->size == 1)
	else if (data->size == 2)
	else if (data->size == 4)
	while (data->padding.left_spaces > 0)
		data->padding.left_spaces--;
	if (data->padding.sign)
		else if (data->plus)
		else if (data->space)
	while (data->padding.zeros > 0)
		data->padding.zeros--;
	while (data->padding.right_spaces > 0)
		data->padding.right_spaces--;
	pf_putlong_base(va_arg(data->ap, long), "0123456789abcdef", data);
	pf_putlong_base(va_arg(data->ap, long), "0123456789ABCDEF", data);
	pf_putlong_base(va_arg(data->ap, long), "01234567", data);
	data->padding.size = ft_strlen(s);
	if (data->prec < data->padding.size)
		data->padding.size = data->prec;
	if (!data->left && data->zero)
		data->padding.zeros = data->l_min - data->padding.size;
	data->padding.right_spaces = 0;
	data->padding.left_spaces = 0;
	if (data->left)
		data->padding.right_spaces = data->l_min - data->padding.zeros
			- data->padding.size;
		data->padding.left_spaces = data->l_min - data->padding.zeros
			- data->padding.size;
	s = va_arg(data->ap, char *);
	while (data->padding.left_spaces > 0)
		data->padding.left_spaces--;
	while (data->padding.zeros > 0)
		data->padding.zeros--;
	fill_buffer(data, s, data->padding.size);
	while (data->padding.right_spaces > 0)
		data->padding.right_spaces--;
	pf_putulong(va_arg(data->ap, long), data);
